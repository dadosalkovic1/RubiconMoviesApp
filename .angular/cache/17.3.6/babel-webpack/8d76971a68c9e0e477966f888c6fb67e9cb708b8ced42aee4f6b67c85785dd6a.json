{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs';\nlet SearchService = class SearchService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'https://api.themoviedb.org/3';\n    this.apiKey = '5e1ed90c95e0ac41fa9d2817783fab51';\n  }\n  searchMovies(query) {\n    const url = `${this.baseUrl}/search/movie?api_key=${this.apiKey}&query=${query}`;\n    return this.http.get(url).pipe(map(response => response.results));\n  }\n  searchShows(query) {\n    const url = `${this.baseUrl}/search/tv?api_key=${this.apiKey}&query=${query}`;\n    return this.http.get(url).pipe(map(response => response.results));\n  }\n  static #_ = this.ctorParameters = () => [{\n    type: HttpClient\n  }];\n};\nSearchService = __decorate([Injectable({\n  providedIn: 'root'\n})], SearchService);\nexport { SearchService };","map":{"version":3,"names":["Injectable","HttpClient","map","SearchService","constructor","http","baseUrl","apiKey","searchMovies","query","url","get","pipe","response","results","searchShows","_","__decorate","providedIn"],"sources":["C:\\Users\\Administrator\\Desktop\\RubiconMovieApp\\src\\app\\services\\search.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, map } from 'rxjs';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class SearchService {\r\n\r\n  private baseUrl = 'https://api.themoviedb.org/3';\r\n  private apiKey = '5e1ed90c95e0ac41fa9d2817783fab51'\r\n  constructor(private http: HttpClient) {}\r\n\r\n  searchMovies(query: string, ): Observable<any[]> {\r\n    const url = `${this.baseUrl}/search/movie?api_key=${this.apiKey}&query=${query}`;\r\n    return this.http.get<any[]>(url).pipe(\r\n      \r\n      map((response: any) => response.results)\r\n    );\r\n  }\r\n  searchShows(query: string): Observable<any[]> {\r\n    const url = `${this.baseUrl}/search/tv?api_key=${this.apiKey}&query=${query}`;\r\n    return this.http.get<any[]>(url).pipe(\r\n      map((response: any) => response.results)\r\n    );\r\n  }\r\n  \r\n  }"],"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,UAAU,QAAQ,sBAAsB;AACjD,SAAqBC,GAAG,QAAQ,MAAM;AAI/B,IAAMC,aAAa,GAAnB,MAAMA,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,8BAA8B;IACxC,KAAAC,MAAM,GAAG,kCAAkC;EACZ;EAEvCC,YAAYA,CAACC,KAAa;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,yBAAyB,IAAI,CAACC,MAAM,UAAUE,KAAK,EAAE;IAChF,OAAO,IAAI,CAACJ,IAAI,CAACM,GAAG,CAAQD,GAAG,CAAC,CAACE,IAAI,CAEnCV,GAAG,CAAEW,QAAa,IAAKA,QAAQ,CAACC,OAAO,CAAC,CACzC;EACH;EACAC,WAAWA,CAACN,KAAa;IACvB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACJ,OAAO,sBAAsB,IAAI,CAACC,MAAM,UAAUE,KAAK,EAAE;IAC7E,OAAO,IAAI,CAACJ,IAAI,CAACM,GAAG,CAAQD,GAAG,CAAC,CAACE,IAAI,CACnCV,GAAG,CAAEW,QAAa,IAAKA,QAAQ,CAACC,OAAO,CAAC,CACzC;EACH;EAAC,QAAAE,CAAA,G;;;;AAlBUb,aAAa,GAAAc,UAAA,EAHzBjB,UAAU,CAAC;EACVkB,UAAU,EAAE;CACb,CAAC,C,EACWf,aAAa,CAoBvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}